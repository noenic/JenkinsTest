pipeline {
    agent none

    stages {
        stage('Test, Build, and Push on Worker') {
            agent {
                label 'worker'
            }
            steps {
                script {
                    try {
                        echo "Étape 0 : Installation des dépendances"
                        sh 'pip3 install -r requirements.txt'

                        echo "Étape 1 : Lancer le serveur Flask main.py"
                        sh 'python3 src/main.py &'
                        
                        // Attendre un peu pour que le serveur démarre (ajuster si nécessaire)
                        sleep time: 5, unit: 'SECONDS'
                        
                        echo "Étape 2 : Exécuter les tests de l'application (test.py)"
                        sh 'python3 src/test.py'
                        
                        echo "Étape 3 : Arrêter le serveur Flask"
                        sh 'pkill -f main.py'
                        
                        echo "Étape 4 : Lire la version depuis le fichier"
                        def versionFileContent = sh(script: 'cat ./src/version', returnStdout: true).trim()
                        env.VERSION = versionFileContent

                        echo "La version du fichier est : ${env.VERSION}"

                        echo "Étape 5 : Build du Dockerfile avec la version taguée"
                        sh "docker build -t reg.noenic.duckdns.org/pythonapi:${env.VERSION} ."
                        
                        echo "Étape 6 : Push de l'image taguée sur DockerHub"
                        sh "docker push reg.noenic.duckdns.org/pythonapi:${env.VERSION}"

                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'  // Marquer le build comme échoué
                        error('Échec d\'une étape, arrêt du pipeline.')  // Arrêter le pipeline
                    }
                }
            }
            post {
                always {
                    // Notification Discord à la fin de l'étape
                    script {
                        discordSend(
                            color: currentBuild.result == 'SUCCESS' ? 'good' : 'danger',
                            message: currentBuild.result == 'SUCCESS' ? "Test, Build, et Push sur le worker réussis! Version: ${env.VERSION}" : "Test, Build, et Push sur le worker échoués!",
                            webhookUrl: 'https://discord.com/api/webhooks/1098993052783235203/npvyM3x8vFAM4bH2ZE0UwPEjUO3pf-NB63c8pLJLOFLHBdSTGHyr3NlQkiF2GGTs8jEG'
                        )
                    }
                }
            }
        }

        stage('Deploy Helm Chart on Master') {
            agent {
                label 'master'
            }
            steps {
                script {
                    try {
                        echo "Déploiement de l'application avec Helm"
                        sh "helm upgrade --install pythonapi ./Chart --set image.tag=${env.VERSION} -n tp"
                        sleep time: 10, unit: 'SECONDS'
                        def response = sh(script: "curl -s http://192.168.0.250:30809/version", returnStdout: true).trim()
                        def latestVersion = sh(script: 'cat ./src/version', returnStdout: true).trim()
                        if (response == latestVersion) {
                            echo "La dernière version est correctement déployée."
                        } else {
                            error("La dernière version n'est pas correctement déployée.")
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'  // Marquer le build comme échoué
                        error('Échec d\'une étape, arrêt du pipeline.')  // Arrêter le pipeline
                    }
                }
            }
            post {
                always {
                    // Notification Discord à la fin de l'étape
                    script {
                        discordSend(
                            color: currentBuild.result == 'SUCCESS' ? 'good' : 'danger',
                            message: currentBuild.result == 'SUCCESS' ? "Déploiement réussi! Version déployée: ${env.VERSION}" : "Déploiement échoué!",
                            webhookUrl: 'https://discord.com/api/webhooks/1098993052783235203/npvyM3x8vFAM4bH2ZE0UwPEjUO3pf-NB63c8pLJLOFLHBdSTGHyr3NlQkiF2GGTs8jEG'
                        )
                    }
                }
            }
        }
    }
}
