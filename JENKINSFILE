pipeline {
    agent none
    environment {
    DISCORD_WEBHOOK = credentials('discord_webhook')
    CURRENT_STEP = ''
    }
    stages {
pipeline {
    agent none
    stages {
        stage('Test on Worker') {
            agent {
                label 'worker'
            }
            steps {
                script {
                        // On met la variable d'environnement CURRENT_STEP à jour pour la notification Discord
                        echo "Étape 0 : Installation des dépendances"
                        sh 'pip3 install -r requirements.txt'
                }
                script {
                        echo "Étape 1 : Lire la version depuis le fichier"
                        def versionFileContent = sh(script: 'cat ./src/version', returnStdout: true).trim()
                        env.VERSION = versionFileContent
                        echo "La version du fichier est : ${env.VERSION}"
                }
                script {
                        echo "Étape 2 : Lancer le serveur Flask main.py"
                        sh 'python3 src/main.py &'
                        // Attendre un peu pour que le serveur démarre 
                        sleep time: 5, unit: 'SECONDS'
                }
                script {
                        echo "Étape 3 : Exécuter les
                         tests de l'application (test.py)"
                        sh 'python3 src/test.py'
                        sh 'pkill -f main.py'
                }
                script {

                        echo "Étape 5 : Build du Dockerfile avec la version taguée"
                        sh "docker build -t reg.noenic.duckdns.org/pythonapi:${env.VERSION} ."
                }
                script {
                        currentStep = "push docker image"
                        echo "Étape 6 : Push de l'image taguée sur DockerHub"
                        sh "docker push reg.noenic.duckdns.org/pythonapi:${env.VERSION}"
                }
            }
          }
        }

        stage('Deploy Helm Chart on Master') {
            agent {
                label 'master'
            }
            // Si le build précédent est un succès, on continue
            when {
                expression {
                    currentBuild.currentResult == 'SUCCESS'
                }
            }

            steps {
                script {
                    withCredentials([string(credentialsId: 'discord_webhook', variable: 'DISCORD_WEBHOOK')]){
                    try {
                        currentStep = "helm upgrade"
                        echo "Déploiement de l'application avec Helm"
                        sh "helm upgrade --install pythonapi ./Chart --set image.tag=${env.VERSION} -n tp"
                        currentStep = "check if deployment is on new version"
                        sleep time: 10, unit: 'SECONDS'
                        def response = sh(script: "curl -s http://192.168.0.250:30809/version", returnStdout: true).trim()
                        def latestVersion = sh(script: 'cat ./src/version', returnStdout: true).trim()
                        if (response != latestVersion) {
                            currentBuild.result = 'FAILURE'  // Marquer le build comme échoué
                        }


                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'  // Marquer le build comme échoué
                    } finally {
                        // Notification Discord à la fin de l'étape
                        script {
                            discordSend(
                                title: "Déploiement de l'application avec Helm",
                                description: currentBuild.currentResult == 'SUCCESS' ? "Le déploiement de l'application est un succès." : "Le déploiement de l'application est un échec. \n\n Erreur sur : ${currentStep}",
                                footer: "Build ${currentBuild.number}",
                                link: env.BUILD_URL,
                                result: currentBuild.currentResult,
                                webhookURL: DISCORD_WEBHOOK

                            )
                            if (currentBuild.currentResult == 'FAILURE') {
                            error("Erreur sur : ${currentStep}")
                            }
                        }
                    }
                }
             }
            }
        }
    }
}

        stage('Deploy Helm Chart on Master') {
            agent {
                label 'master'
            }
            // Si le build précédent est un succès, on continue
            when {
                expression {
                    currentBuild.currentResult == 'SUCCESS'
                }
            }

            steps {
                script {
                    withCredentials([string(credentialsId: 'discord_webhook', variable: 'DISCORD_WEBHOOK')]){
                    try {
                        currentStep = "helm upgrade"
                        echo "Déploiement de l'application avec Helm"
                        sh "helm upgrade --install pythonapi ./Chart --set image.tag=${env.VERSION} -n tp"
                        currentStep = "check if deployment is on new version"
                        sleep time: 10, unit: 'SECONDS'
                        def response = sh(script: "curl -s http://192.168.0.250:30809/version", returnStdout: true).trim()
                        def latestVersion = sh(script: 'cat ./src/version', returnStdout: true).trim()
                        if (response != latestVersion) {
                            currentBuild.result = 'FAILURE'  // Marquer le build comme échoué
                        }


                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'  // Marquer le build comme échoué
                    } finally {
                        // Notification Discord à la fin de l'étape
                        script {
                            discordSend(
                                title: "Déploiement de l'application avec Helm",
                                description: currentBuild.currentResult == 'SUCCESS' ? "Le déploiement de l'application est un succès." : "Le déploiement de l'application est un échec. \n\n Erreur sur : ${currentStep}",
                                footer: "Build ${currentBuild.number}",
                                link: env.BUILD_URL,
                                result: currentBuild.currentResult,
                                webhookURL: DISCORD_WEBHOOK

                            )
                            if (currentBuild.currentResult == 'FAILURE') {
                            error("Erreur sur : ${currentStep}")
                            }
                        }
                    }
                }
             }
            }
        }
    }
}