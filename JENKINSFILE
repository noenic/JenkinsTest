pipeline {
    agent none
    environment {
        DISCORD_WEBHOOK = credentials('discord_webhook')
    }
    stages {
        stage('Test on Worker') {
            agent {
                label 'worker'
            }
            steps {
                script {
                    echo "Étape 0 : Installation des dépendances"
                    sh 'pip3 install -r requirements.txt'
                }
                script {
                    echo "Étape 1 : Lire la version depuis le fichier"
                    VERSION = sh(script: 'cat ./src/version', returnStdout: true).trim()
                    echo "La version du fichier est : ${VERSION}"
                }
                script {
                    echo "Étape 2 : Lancer le serveur Flask main.py"
                    sh 'python3 src/main.py &'
                    // Attendre un peu pour que le serveur démarre 
                    sleep time: 5, unit: 'SECONDS'
                }
                script {
                    echo "Étape 3 : Exécuter les tests de l'application (test.py)"
                    sh 'python3 src/test.py'
                    sh 'pkill -f python3'
                }
            }
        }
        stage('Build and Test Docker Image') {
            agent {
                label 'worker'
            }
            steps {
                script {
                    echo "Étape 5 : Build du Dockerfile avec la version taguée"
                    sh "docker build -t reg.noenic.duckdns.org/pythonapi:${VERSION} ."
                }
                script {
                    echo "Étape 6 : test de l'image"
                    sh "docker rm -f pythonapi || true"
                    sh "docker run -d -p 5000:5000 --name pythonapi --rm reg.noenic.duckdns.org/pythonapi:${VERSION}"
                    sleep time: 5, unit: 'SECONDS'
                    
                    echo "Étape 7 : Tester l'endpoint /version"
                    if(sh(script: 'curl -s 172.17.0.1:5000/version', returnStdout: true).trim() != VERSION) {
                        error "Test de l'endpoint /version échoué"
                    }
                    sh "docker rm -f pythonapi"
                }
            }
        }
        stage('Push Docker Image') {
            agent {
                label 'worker'
            }
            steps {
                script {
                    sh "docker push reg.noenic.duckdns.org/pythonapi:${VERSION}"
                }
            }
        }
        stage('Deploy to cluster') {
            agent {
                label 'master'
            }
            steps {
                script {
                    echo "Étape 0 : Récupération de la version"
                    VERSION = sh(script: 'cat ./src/version', returnStdout: true).trim()
                }
                script {
                    echo "Étape 1 : Déploiement de l'application sur le cluster"
                    sh "helm upgrade --install pythonapi ./Chart --set image.tag=${VERSION} -n tp"
                    sleep time: 10, unit: 'SECONDS'
                }
                script {
                    echo "Étape 2 : Test de l'application déployée"
                    if (sh(script: "curl -s http://192.168.0.250:30809/version", returnStdout: true).trim() != VERSION) {
                        error "Test de l'endpoint /version échoué"
                    }
                }
            }
        }
    }
    post {
        always{
            agent {
                label 'master'
            }
            discordSend(
                                title: "Déploiement de l'application avec Helm",
                                description: currentBuild.currentResult == 'SUCCESS' ? "Le déploiement de l'application est un succès." : "Le déploiement de l'application est un échec. \n\n Erreur sur : ${currentStep}",
                                footer: "Build ${currentBuild.number}",
                                link: env.BUILD_URL,
                                result: currentBuild.currentResult,
                                webhookURL: DISCORD_WEBHOOK
             )
        }
    }
}
