pipeline {
    agent none

    stages {
        stage('Test, Build, and Push on Worker') {
            agent {
                label 'worker'
            }
            steps {
                script {
                    echo "Étape 0 : Installation des dépendances"
                    sh 'pip3 install -r requirements.txt'
                }
            }

            steps {
                script {
                    echo "Étape 1 : Lancer le serveur Flask main.py"
                    sh 'python3 src/main.py &'

                    // Attendre un peu pour que le serveur démarre (ajuster si nécessaire)
                    sleep time: 5, unit: 'SECONDS'
                }
            }

            steps {
                script {
                    echo "Étape 2 : Exécuter les tests de l'application (test.py)"
                    sh 'python3 src/tesst.py'
                    echo "Output : ${output}"
                }
            }

            steps {
                script {
                    echo "Étape 3 : Arrêter le serveur Flask"
                    sh 'pkill -f main.py'
                }
            }

            steps {
                script {
                    echo "Étape 4 : Lire la version depuis le fichier"
                    def versionFileContent = sh(script: 'cat ./src/version', returnStdout: true).trim()
                    env.VERSION = versionFileContent

                    echo "La version du fichier est : ${env.VERSION}"
                }
            }

            steps {
                script {
                    echo "Étape 5 : Build du Dockerfile avec la version taguée"
                    sh "docker build -t reg.noenic.duckdns.org/pythonapi:${env.VERSION} ."
                }
            }

            steps {
                script {
                    echo "Étape 6 : Push de l'image taguée sur DockerHub"
                    sh "docker push reg.noenic.duckdns.org/pythonapi:${env.VERSION}"
                }
            }

            steps {
                script {
                    // Notification Discord à la fin de l'étape
                    // Si le build est un succès, on envoie une notification Discord avec un succès sinon une notification d'échec avec le output de la dernière commande
                    if (currentBuild.currentResult == 'SUCCESS') {
                        discordSend(
                            title: "Test, Build, and Push on Worker",
                            description: "Etat du build : ${currentBuild.currentResult} \n\n Version taguée : ${env.VERSION}",
                            footer: "Build ${currentBuild.number}",
                            link: env.BUILD_URL,
                            result: currentBuild.currentResult,
                            webhookURL: 'https://discord.com/api/webhooks/1098993052783235203/npvyM3x8vFAM4bH2ZE0UwPEjUO3pf-NB63c8pLJLOFLHBdSTGHyr3NlQkiF2GGTs8jEG'
                        )
                    } else {
                        discordSend(
                            title: "Test, Build, and Push on Worker",
                            description: "Erreur :",
                            footer: "Build ${currentBuild.number}",
                            link: env.BUILD_URL,
                            result: currentBuild.currentResult,
                            webhookURL: 'https://discord.com/api/webhooks/1098993052783235203/npvyM3x8vFAM4bH2ZE0UwPEjUO3pf-NB63c8pLJLOFLHBdSTGHyr3NlQkiF2GGTs8jEG'
                        )
                        error("Le build a échoué. Les étapes suivantes ne seront pas exécutées.")
                    }
                }
            }
        }

        stage('Deploy Helm Chart on Master') {
            agent {
                label 'master'
            }
            when {
                expression {
                    currentBuild.currentResult != 'FAILURE'
                }
            }
            steps {
                script {
                    try {
                        echo "Déploiement de l'application avec Helm"
                        sh "helm upgrade --install pythonapi ./Chart --set image.tag=${env.VERSION} -n tsp"

                        sleep time: 10, unit: 'SECONDS'
                        def response = sh(script: "curl -s http://192.168.0.250:30809/version", returnStdout: true).trim()
                        def latestVersion = sh(script: 'cat ./src/version', returnStdout: true).trim()
                        if (response == latestVersion) {
                            echo "La dernière version est correctement déployée."
                        } else {
                            error('La dernière version n\'est pas correctement déployée.')
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'  // Marquer le build comme échoué
                        
                    } finally {
                        // Notification Discord à la fin de l'étape
                        script {
                            discordSend(
                                title: "Déploiement de l'application avec Helm",
                                description: "Etat du déploiement : ${currentBuild.currentResult} \n\n Version déployée : ${env.VERSION}",
                                footer: "Build ${currentBuild.number}",
                                link: env.BUILD_URL,
                                result: currentBuild.currentResult,
                                webhookURL: 'https://discord.com/api/webhooks/1098993052783235203/npvyM3x8vFAM4bH2ZE0UwPEjUO3pf-NB63c8pLJLOFLHBdSTGHyr3NlQkiF2GGTs8jEG'

                            )
                        }
                    }
                }
            }
        }
    }
}