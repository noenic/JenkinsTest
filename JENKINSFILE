pipeline {
    agent none
    environment {
    DISCORD_WEBHOOK = credentials('discord_webhook')
    CURRENT_STEP = ''
    VERSION = ''
    }
    stages {
        stage('Test on Worker') {
            agent {
                label 'worker'
            }
            steps {
                script {
                        echo "Étape 0 : Installation des dépendances"
                        sh 'pip3 install -r requirements.txt'
                }
                script {
                        echo "Étape 1 : Lire la version depuis le fichier"
                        def versionFileContent = sh(script: 'cat ./src/version', returnStdout: true).trim()
                        env.VERSION = versionFileContent
                        echo "La version du fichier est : ${env.VERSION}"
                }
                script {
                        echo "Étape 2 : Lancer le serveur Flask main.py"
                        sh 'python3 src/main.py &'
                        // Attendre un peu pour que le serveur démarre 
                        sleep time: 5, unit: 'SECONDS'
                }
                script {
                        echo "Étape 3 : Exécuter les tests de l'application (test.py)"
                        sh 'python3 src/test.py'
                        sh 'pkill -f main.py'
                }
            }
        }
        stage('Build and Push Docker Image') {
            agent {
                label 'worker'
            }
            steps {
                script {

                        echo "Étape 5 : Build du Dockerfile avec la version taguée"
                        sh "docker build -t reg.noenic.duckdns.org/pythonapi:${env.VERSION} ."
                }
                script {
                        currentStep = "push docker image"
                        echo "Étape 6 : Push de l'image taguée sur DockerHub"
                        sh "docker push reg.noenic.duckdns.org/pythonapi:${env.VERSION}"
                }
            }
          }
        }
    }
